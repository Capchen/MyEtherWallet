{"version":3,"sources":["webpack:///./src/core/helpers/validateHexString.js","webpack:///./src/modules/contract/ModuleContractDeploy.vue?c006","webpack:///src/modules/contract/ModuleContractDeploy.vue","webpack:///./src/modules/contract/ModuleContractDeploy.vue?0a63","webpack:///./src/modules/contract/ModuleContractDeploy.vue","webpack:///./src/core/helpers/addressUtils.js","webpack:///./src/modules/contract/handlers/solidityTypes.js","webpack:///./src/modules/contract/handlers/common.js"],"names":["validateHexString","str","isHexStrict","render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","scopedSlots","_u","key","fn","value","isValidByteCodeInput","model","callback","$$v","byteCode","expression","isValidABI","abiInterface","contractName","directives","name","rawName","constructorInputs","_v","_l","input","idx","getType","type","isValidInput","solidityType","on","$event","valueInput","$set","_e","isETHValue","ethAmount","nativeOn","resetDefaults","canDeploy","deploy","apply","arguments","proxy","staticRenderFns","data","byteCodeHex","inputsValid","computed","mapState","mapGetters","isContructorPayable","watch","Vue","methods","mapActions","val","getConstructor","abi","inputs","JSON","params","contract","send","from","toHex","details","_input","toWei","sType","component","isAddress","address","web3","utils","toChecksumAddress","uint","int","string","bytes","bool","isContractArgValid","includes","parsedValue","Array","isArray","stringToArray","replace","parsedItem","isNaN","isInt","hasWhiteSpace","substr","e","inputType","parseABI","json","parse","length","parseJSON","test"],"mappings":"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","file":"js/chunk-74b9067f.2a8a8f3a.js","sourcesContent":["import { isHexStrict } from 'web3-utils';\n\nconst validateHexString = str => {\n  if (str === '') return true;\n  return isHexStrict(str);\n};\n\nexport default validateHexString;\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('mew-module',{staticClass:\"d-flex flex-grow-1 pt-6\",attrs:{\"has-elevation\":true,\"has-indicator\":true,\"title\":\"Deploy contract\"},scopedSlots:_vm._u([{key:\"moduleBody\",fn:function(){return [_c('div',[_c('v-textarea',{staticClass:\"BytecodeInput\",attrs:{\"outlined\":\"\",\"label\":\"Bytecode\",\"placeholder\":\" \",\"rules\":[\n          function (value) {\n            return _vm.isValidByteCodeInput(value);\n          }\n        ]},model:{value:(_vm.byteCode),callback:function ($$v) {_vm.byteCode=$$v},expression:\"byteCode\"}}),_c('v-textarea',{staticClass:\"ABIInput\",attrs:{\"outlined\":\"\",\"name\":\"input-7-4\",\"label\":\"ABI/JSON Interface\",\"value\":\"\",\"placeholder\":\" \",\"rules\":[\n          function (value) {\n            return _vm.isValidABI(value);\n          }\n        ]},model:{value:(_vm.abiInterface),callback:function ($$v) {_vm.abiInterface=$$v},expression:\"abiInterface\"}}),_c('mew-input',{staticClass:\"ContractName\",attrs:{\"label\":\"Contract name\",\"placeholder\":\" \"},model:{value:(_vm.contractName),callback:function ($$v) {_vm.contractName=$$v},expression:\"contractName\"}}),_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.constructorInputs.length),expression:\"constructorInputs.length\"}]},[_c('div',{staticClass:\"mb-10\"},[_vm._v(\"Constructor Inputs\")]),_vm._l((_vm.constructorInputs),function(input,idx){return _c('div',{key:input.name + idx,staticClass:\"input-item-container\"},[(_vm.getType(input.type).type !== 'radio')?_c('mew-input',{staticClass:\"non-bool-input\",attrs:{\"label\":((input.name) + \" (\" + (input.type) + \")\"),\"rules\":[\n              function (value) {\n                return _vm.isValidInput(value, _vm.getType(input.type).solidityType);\n              }\n            ]},on:{\"input\":function($event){return _vm.valueInput(idx, $event)}},model:{value:(input.value),callback:function ($$v) {_vm.$set(input, \"value\", $$v)},expression:\"input.value\"}}):_vm._e(),(_vm.getType(input.type).type === 'radio')?_c('div',{staticClass:\"bool-input-container\"},[_c('div',{staticClass:\"bool-items\"},[_c('mew-checkbox',{attrs:{\"value\":true,\"label\":((input.name) + \" (\" + (input.type) + \")\"),\"type\":\"radio\",\"checked\":\"\"},model:{value:(input.value),callback:function ($$v) {_vm.$set(input, \"value\", $$v)},expression:\"input.value\"}})],1)]):_vm._e()],1)}),(_vm.isContructorPayable)?_c('mew-input',{staticClass:\"non-bool-input\",attrs:{\"rules\":[\n            function (value) {\n              return _vm.isETHValue(value);\n            }\n          ],\"label\":\"value (ETH)\"},model:{value:(_vm.ethAmount),callback:function ($$v) {_vm.ethAmount=$$v},expression:\"ethAmount\"}}):_vm._e()],2),_c('div',{staticClass:\"text-right\"},[_c('mew-button',{staticClass:\"mr-4\",attrs:{\"btn-style\":\"light\",\"title\":\"Clear all\",\"has-full-width\":false},nativeOn:{\"click\":function($event){return _vm.resetDefaults()}}}),_c('mew-button',{staticClass:\"SignTransactionButton\",attrs:{\"title\":\"Sign Transaction\",\"has-full-width\":false,\"disabled\":!_vm.canDeploy},nativeOn:{\"click\":function($event){return _vm.deploy.apply(null, arguments)}}})],1)],1)]},proxy:true}])})}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <mew-module\n    class=\"d-flex flex-grow-1 pt-6\"\n    :has-elevation=\"true\"\n    :has-indicator=\"true\"\n    title=\"Deploy contract\"\n  >\n    <template #moduleBody>\n      <div>\n        <v-textarea\n          v-model=\"byteCode\"\n          outlined\n          label=\"Bytecode\"\n          class=\"BytecodeInput\"\n          placeholder=\" \"\n          :rules=\"[\n            value => {\n              return isValidByteCodeInput(value);\n            }\n          ]\"\n        />\n        <v-textarea\n          v-model=\"abiInterface\"\n          outlined\n          name=\"input-7-4\"\n          label=\"ABI/JSON Interface\"\n          class=\"ABIInput\"\n          value=\"\"\n          placeholder=\" \"\n          :rules=\"[\n            value => {\n              return isValidABI(value);\n            }\n          ]\"\n        ></v-textarea>\n        <mew-input\n          v-model=\"contractName\"\n          label=\"Contract name\"\n          class=\"ContractName\"\n          placeholder=\" \"\n        />\n        <div v-show=\"constructorInputs.length\">\n          <div class=\"mb-10\">Constructor Inputs</div>\n          <div\n            v-for=\"(input, idx) in constructorInputs\"\n            :key=\"input.name + idx\"\n            class=\"input-item-container\"\n          >\n            <mew-input\n              v-if=\"getType(input.type).type !== 'radio'\"\n              v-model=\"input.value\"\n              :label=\"`${input.name} (${input.type})`\"\n              class=\"non-bool-input\"\n              :rules=\"[\n                value => {\n                  return isValidInput(value, getType(input.type).solidityType);\n                }\n              ]\"\n              @input=\"valueInput(idx, $event)\"\n            />\n            <div\n              v-if=\"getType(input.type).type === 'radio'\"\n              class=\"bool-input-container\"\n            >\n              <div class=\"bool-items\">\n                <mew-checkbox\n                  v-model=\"input.value\"\n                  :value=\"true\"\n                  :label=\"`${input.name} (${input.type})`\"\n                  type=\"radio\"\n                  checked\n                />\n              </div>\n            </div>\n          </div>\n          <mew-input\n            v-if=\"isContructorPayable\"\n            v-model=\"ethAmount\"\n            :rules=\"[\n              value => {\n                return isETHValue(value);\n              }\n            ]\"\n            :label=\"`value (ETH)`\"\n            class=\"non-bool-input\"\n          />\n        </div>\n        <div class=\"text-right\">\n          <mew-button\n            btn-style=\"light\"\n            title=\"Clear all\"\n            :has-full-width=\"false\"\n            class=\"mr-4\"\n            @click.native=\"resetDefaults()\"\n          />\n          <mew-button\n            title=\"Sign Transaction\"\n            class=\"SignTransactionButton\"\n            :has-full-width=\"false\"\n            :disabled=\"!canDeploy\"\n            @click.native=\"deploy\"\n          />\n        </div>\n      </div>\n    </template>\n  </mew-module>\n</template>\n\n<script>\nimport Vue from 'vue';\nimport { mapState, mapActions, mapGetters } from 'vuex';\nimport { toWei, toBN, toHex } from 'web3-utils';\n\nimport sanitizeHex from '@/core/helpers/sanitizeHex';\nimport validateHexString from '@/core/helpers/validateHexString';\nimport {\n  parseJSON,\n  parseABI,\n  getType as getInputType,\n  isContractArgValid\n} from './handlers/common';\nimport { stringToArray } from '@/core/helpers/common';\n\nexport default {\n  name: 'ModuleContractDeploy',\n  data() {\n    return {\n      contractName: '',\n      byteCode: '',\n      byteCodeHex: '',\n      abiInterface: '',\n      inputsValid: false,\n      ethAmount: '0'\n    };\n  },\n  computed: {\n    ...mapState('wallet', ['address', 'web3']),\n    ...mapState('global', ['currentNetwork']),\n    ...mapGetters('global', ['gasPrice']),\n    canDeploy() {\n      return (\n        this.byteCodeHex !== '' &&\n        this.isValidByteCodeInput(this.byteCodeHex) &&\n        this.isValidABI(this.abiInterface) &&\n        (this.getConstructor(JSON.parse(this.abiInterface)).inputs.length ===\n          0 ||\n          this.inputsValid) &&\n        (this.isContructorPayable === false || this.isETHValue(this.ethAmount))\n      );\n    },\n    constructorInputs() {\n      if (this.isValidABI(this.abiInterface)) {\n        return this.getConstructor(JSON.parse(this.abiInterface)).inputs;\n      }\n      return [];\n    },\n    isContructorPayable() {\n      if (this.isValidABI(this.abiInterface)) {\n        return (\n          this.getConstructor(JSON.parse(this.abiInterface)).stateMutability ===\n          'payable'\n        );\n      }\n      return false;\n    }\n  },\n  watch: {\n    abiInterface() {\n      this.constructorInputs.forEach((i, idx) => {\n        this.constructorInputs[idx].value = '';\n        Vue.set(this.constructorInputs, idx, this.constructorInputs[idx]);\n      });\n    }\n  },\n  methods: {\n    ...mapActions('global', ['addLocalContract']),\n    resetDefaults() {\n      this.contractName = '';\n      this.byteCode = '';\n      this.byteCodeHex = '';\n      this.abiInterface = '';\n      this.inputsValid = false;\n      this.ethAmount = '0';\n    },\n    isValidByteCodeInput(val) {\n      if (validateHexString(val)) {\n        this.byteCodeHex = sanitizeHex(val);\n        return true;\n      }\n      if (validateHexString('0x' + val)) {\n        this.byteCodeHex = '0x' + val;\n        return true;\n      }\n      try {\n        const parsed = JSON.parse(val);\n        if (validateHexString('0x' + parsed.object)) {\n          this.byteCodeHex = '0x' + parsed.object;\n          return true;\n        }\n        return false;\n      } catch (e) {\n        return false;\n      }\n    },\n    isValidABI(val) {\n      return !!parseJSON(val) && !!parseABI(parseJSON(val));\n    },\n    getConstructor(abi) {\n      for (const method of abi) {\n        if (method.type === 'constructor') return method;\n      }\n      return { inputs: [] };\n    },\n    deploy() {\n      const contract = new this.web3.eth.Contract(\n        JSON.parse(this.abiInterface)\n      );\n      const params = [];\n      let details = {};\n      for (const _input of this.constructorInputs) {\n        if (_input.type.includes('[]') && _input.value)\n          params.push(stringToArray(_input.value));\n        else params.push(_input.value);\n      }\n      contract\n        .deploy({\n          data: this.byteCodeHex,\n          arguments: params\n        })\n        .send({\n          from: this.address,\n          value: this.isContructorPayable\n            ? toHex(toBN(toWei(this.ethAmount)))\n            : '0x00'\n        })\n        .on('transactionHash', () => {\n          details = {\n            name: this.contractName,\n            abi: JSON.stringify(JSON.parse(this.abiInterface))\n          };\n          this.resetDefaults();\n        })\n        .on('receipt', result => {\n          details.address = result.contractAddress;\n          if (details.name === '') {\n            details.name = result.contractAddress;\n          }\n          this.addLocalContract(details);\n        });\n    },\n    valueInput(idx, value) {\n      if (idx && value) {\n        this.constructorInputs[idx].value = value;\n      }\n      this.inputsValid = true;\n      for (const _input of this.constructorInputs) {\n        if (\n          !this.isValidInput(\n            _input.value,\n            this.getType(_input.type).solidityType\n          )\n        )\n          this.inputsValid = false;\n      }\n    },\n    isETHValue(val) {\n      try {\n        toWei(val, 'ether');\n        return true;\n      } catch (e) {\n        return false;\n      }\n    },\n    getType(type) {\n      return getInputType(type);\n    },\n    isValidInput(value, sType) {\n      return isContractArgValid(value, sType);\n    }\n  }\n};\n</script>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ModuleContractDeploy.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ModuleContractDeploy.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ModuleContractDeploy.vue?vue&type=template&id=a0c7dc0e&\"\nimport script from \"./ModuleContractDeploy.vue?vue&type=script&lang=js&\"\nexport * from \"./ModuleContractDeploy.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import web3 from 'web3';\n\nconst isAddress = address => {\n  return (\n    address && web3.utils.isHexStrict(address) && web3.utils.isAddress(address)\n  );\n};\nconst toChecksumAddress = address => {\n  return web3.utils.toChecksumAddress(address);\n};\nexport { isAddress, toChecksumAddress };\n","const uint = 'uint';\nconst int = 'int';\nconst address = 'address';\nconst string = 'string';\nconst bytes = 'bytes';\nconst bool = 'bool';\n\nexport { uint, address, string, bytes, bool, int };\n","import { isInt, stringToArray } from '@/core/helpers/common';\nimport {\n  address,\n  bool,\n  bytes,\n  int,\n  string,\n  uint\n} from '@/modules/contract/handlers/solidityTypes';\nimport { isAddress } from '@/core/helpers/addressUtils';\nimport validateHexString from '@/core/helpers/validateHexString';\n\nconst isContractArgValid = (value, solidityType) => {\n  try {\n    if (!value && typeof value !== 'boolean') value = '';\n    if (solidityType.includes('[]')) {\n      const parsedValue = Array.isArray(value) ? value : stringToArray(value);\n      const type = solidityType.replace('[]', '');\n      for (const parsedItem of parsedValue) {\n        if (!isContractArgValid(parsedItem, type)) return false;\n      }\n      return true;\n    }\n    if (solidityType.includes(uint) || solidityType.includes(int)) {\n      return (\n        value !== '' && !isNaN(value) && isInt(value) && !hasWhiteSpace(value)\n      );\n    } else if (solidityType === address) return isAddress(value);\n    else if (solidityType === string) return true;\n    else if (solidityType.includes(bytes))\n      return value.substr(0, 2) === '0x' && validateHexString(value);\n    else if (solidityType === bool)\n      return typeof value === typeof true || typeof value === typeof false;\n    return false;\n  } catch (e) {\n    return false;\n  }\n};\nconst getType = inputType => {\n  if (!inputType) inputType = '';\n  if (inputType.includes('[]')) {\n    return { type: 'string', solidityType: `${inputType}` };\n  }\n  if (inputType.includes(uint) || inputType.includes(int))\n    return { type: 'number', solidityType: uint };\n  else if (inputType.includes(address))\n    return { type: 'text', solidityType: address };\n  else if (inputType.includes(string))\n    return { type: 'text', solidityType: string };\n  else if (inputType.includes(bytes))\n    return { type: 'text', solidityType: bytes };\n  else if (inputType.includes(bool))\n    return { type: 'radio', solidityType: bool };\n  return { type: 'text', solidityType: string };\n};\nconst parseABI = json => {\n  if (json === '') return false;\n  try {\n    const value = JSON.parse(json);\n    if (Array.isArray(value)) {\n      if (value.length > 0) {\n        return value;\n      }\n    }\n    return false;\n  } catch (e) {\n    if (Array.isArray(json)) {\n      if (json.length > 0) {\n        return json;\n      }\n    }\n    return false;\n  }\n};\n\nconst parseJSON = json => {\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    if (Array.isArray(json)) {\n      return json;\n    }\n    return false;\n  }\n};\n\nconst hasWhiteSpace = string => {\n  return /\\s/g.test(string);\n};\n\nexport { isContractArgValid, parseJSON, parseABI, getType, hasWhiteSpace };\n"],"sourceRoot":""}