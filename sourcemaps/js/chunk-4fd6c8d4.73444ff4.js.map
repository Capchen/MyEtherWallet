{"version":3,"sources":["webpack:///./node_modules/multiformats/cjs/src/bases/base16.js","webpack:///./node_modules/multiaddr/src/ip.js","webpack:///./node_modules/multiformats/cjs/src/bases/base8.js","webpack:///./node_modules/iso-url/index.js","webpack:///./node_modules/multiformats/cjs/src/bases/base32.js","webpack:///./node_modules/multiformats/cjs/src/bases/base64.js","webpack:///./node_modules/iso-url/src/url-browser.js","webpack:///./node_modules/multiformats/cjs/src/hashes/identity.js","webpack:///./node_modules/multiaddr/src/index.js","webpack:///./node_modules/multiformats/cjs/src/hashes/digest.js","webpack:///./node_modules/is-ip/node_modules/ip-regex/index.js","webpack:///./node_modules/iso-url/src/relative.js","webpack:///./node_modules/multiaddr/node_modules/varint/decode.js","webpack:///./node_modules/multiformats/cjs/src/bases/base36.js","webpack:///./node_modules/uint8arrays/cjs/src/alloc.js","webpack:///./node_modules/multiformats/cjs/vendor/varint.js","webpack:///./node_modules/multiformats/cjs/vendor/base-x.js","webpack:///./node_modules/multiformats/cjs/src/codecs/json.js","webpack:///./node_modules/multiformats/cjs/src/hashes/sha2-browser.js","webpack:///./node_modules/mafmt/src/index.js","webpack:///./node_modules/multiaddr/src/protocols-table.js","webpack:///./node_modules/multiformats/cjs/src/bases/identity.js","webpack:///./node_modules/multiformats/cjs/src/codecs/raw.js","webpack:///./node_modules/multiformats/cjs/src/hashes/hasher.js","webpack:///./node_modules/multiaddr/src/convert.js","webpack:///./node_modules/uint8arrays/cjs/src/concat.js","webpack:///./node_modules/multiformats/cjs/src/varint.js","webpack:///./node_modules/multiformats/cjs/src/basics.js","webpack:///./node_modules/uint8arrays/cjs/src/equals.js","webpack:///./node_modules/is-ipfs/src/index.js","webpack:///./node_modules/err-code/index.js","webpack:///./node_modules/multiaddr/src/codec.js","webpack:///./node_modules/uint8arrays/cjs/src/from-string.js","webpack:///./node_modules/multiformats/cjs/src/bases/base10.js","webpack:///./node_modules/uint8arrays/cjs/src/util/bases.js","webpack:///./node_modules/uint8arrays/cjs/src/util/as-uint8array.js","webpack:///./node_modules/multiformats/cjs/src/bases/base2.js","webpack:///./node_modules/multiformats/cjs/src/index.js","webpack:///./node_modules/multiaddr/node_modules/varint/length.js","webpack:///./node_modules/multiformats/cjs/src/bases/base.js","webpack:///./src/dapps/ens-manager-dapp/components/manage/ManageUploadWebsite.vue?bd60","webpack:///src/dapps/ens-manager-dapp/components/manage/ManageUploadWebsite.vue","webpack:///./src/dapps/ens-manager-dapp/components/manage/ManageUploadWebsite.vue?aa28","webpack:///./src/dapps/ens-manager-dapp/components/manage/ManageUploadWebsite.vue","webpack:///./node_modules/multiformats/cjs/src/bytes.js","webpack:///./node_modules/is-ip/index.js","webpack:///./node_modules/multiaddr/node_modules/varint/encode.js","webpack:///./node_modules/multiformats/cjs/src/bases/base58.js","webpack:///./node_modules/uint8arrays/cjs/src/to-string.js","webpack:///./node_modules/multiaddr/node_modules/varint/index.js","webpack:///./node_modules/multiformats/cjs/src/cid.js"],"names":["Object","defineProperty","exports","value","base","base16","rfc4648","prefix","name","alphabet","bitsPerChar","base16upper","isIp","toString","uint8ArrayToString","isIP","isV4","v4","isV6","v6","toBytes","ip","buff","offset","result","Uint8Array","split","map","byte","parseInt","sections","i","length","isv4","v4Buffer","slice","splice","unshift","push","argv","apply","word","Error","string","view","DataView","buffer","join","getUint16","replace","module","base8","URLWithLegacySupport","format","URLSearchParams","defaultBase","relative","URL","base32","base32upper","base32pad","base32padupper","base32hex","base32hexupper","base32hexpad","base32hexpadupper","base32z","base64","base64pad","base64url","base64urlpad","isReactNative","navigator","product","getDefaultBase","self","location","protocol","host","url","this","super","path","pathname","search","auth","username","password","query","startsWith","hash","hostname","href","origin","port","searchParams","o","createObjectURL","revokeObjectURL","toJSON","obj","userPass","bytes","digest$1","code","encode","coerce","digest","input","create","identity","codec","protocols","varint","CID","base58btc","errCode","inspect","Symbol","for","equals","uint8ArrayEquals","resolvers","Map","symbol","Multiaddr","addr","fromBytes","charAt","fromString","isMultiaddr","bytesToString","opts","parsed","family","transport","protoCodes","assign","codes","buf","decode","n","p","size","sizeForAddr","protos","proto","bytesToTuples","t","tuplesToStringTuples","addrString","s","lastIndexOf","tuples","tuplesToBytes","stringTuples","filter","tuple","names","ipfs","pop","peerIdStr","parse","multihash","e","resolvableProto","find","resolvable","resolver","get","addresses","a","protoNames","parts","address","some","Boolean","multiaddr","byteLength","sizeOffset","encodingLength","digestOffset","encodeTo","set","Digest","bytes$1","subarray","b","options","includeBoundaries","v6seg","trim","v46Exact","RegExp","v4exact","v6exact","exact","protocolMap","defaultProtocol","urlParsed","err","read","MSB","REST","res","shift","counter","l","RangeError","Math","pow","base36","baseX","base36upper","asUint8array","alloc","globalThis","Buffer","asUint8Array","allocUnsafe","encode_1","MSBALL","INT","num","out","oldOffset","MSB$1","REST$1","N1","N2","N3","N4","N5","N6","N7","N8","N9","_brrp_varint","varint$1","ALPHABET","TypeError","BASE_MAP","j","x","xc","charCodeAt","BASE","LEADER","FACTOR","log","iFACTOR","source","ArrayBuffer","isView","byteOffset","Array","isArray","from","zeroes","pbegin","pend","b58","carry","it1","it2","str","repeat","decodeUnsafe","psz","b256","it3","it4","vch","src","_brrp__multiformats_scope_baseX","textEncoder","TextEncoder","textDecoder","TextDecoder","node","JSON","stringify","data","hasher","sha","async","crypto","subtle","sha256","sha512","DNS4","DNS6","DNSADDR","DNS","or","IP","TCP","and","UDP","UTP","QUIC","WebSockets","WebSocketsSecure","HTTP","HTTPS","WebRTCStar","WebSocketStar","WebRTCDirect","Reliable","Stardust","_P2P","_Circuit","CircuitRecursive","Circuit","P2P","makeMatchesFunction","partialMatch","matches","args","arg","ma","pnames","IPFS","Protocols","V","lengthPrefixedVarSize","table","row","object","Hasher","then","uint8ArrayFromString","concat","uint8ArrayConcat","Convert","ip2bytes","ipString","bytes2ip","ipBuff","port2bytes","setUint16","bytes2port","str2bytes","bytes2str","mh2bytes","mh","bytes2mh","onion2bytes","portBuf","onion32bytes","bytes2onion","addrBytes","portBytes","arrays","reduce","acc","curr","output","arr","int","target","base2","base10","base58","sha2","identity$1","raw","json","cid","bases","hashes","codecs","mafmt","pathGatewayPattern","pathPattern","defaultProtocolMatch","defaultHashMath","subdomainGatewayPattern","subdomainIdMatch","subdomainProtocolMatch","fqdnWithTld","isMultihash","formatted","convertToString","isBase32EncodedMultibase","isCID","asCID","isPeerMultiaddr","isIpfs","pattern","protocolMatch","hashMatch","match","toLowerCase","isIpns","ipnsId","includes","test","isString","ipfsSubdomain","ipnsSubdomain","subdomain","ipfsUrl","ipnsUrl","peerMultiaddr","base32cid","ipfsPath","ipnsPath","urlOrPath","cidPath","props","key","enumerable","configurable","createError","_","message","stack","ErrClass","prototype","getPrototypeOf","convert","stringToStringTuples","part","ParseError","cleanPath","stringTuplesToString","tup","protoFromTuple","stringTuplesToTuples","stringToBytes","validateBytes","isValidBytes","undefined","encoding","decoder","basics","createCodec","encoder","substring","ascii","String","fromCharCode","BASES","utf8","hex","latin1","binary","baseX$1","Encoder","baseEncode","Decoder","baseDecode","text","ComposedDecoder","decoders","keys","left","right","Codec","end","bits","written","SyntaxError","pad","mask","render","_vm","_h","$createElement","_c","_self","staticClass","attrs","_v","_s","$t","_e","settingIpfs","ref","staticStyle","on","fileChange","nativeOn","$event","$refs","zipInput","click","error","setHash","model","callback","$$v","expression","isValidIPFS","setIpfs","staticRenderFns","default","type","uploadFile","uploadedHash","computed","watch","newVal","methods","Toast","val","component","empty","toHex","d","padStart","fromHex","hexes","aa","bb","ii","constructor","isBinary","ipRegex","version","Number","MAX_SAFE_INTEGER","base58flickr","array","_baseCache","defineProperties","hidden","readonly","DAG_PB_CODE","SHA_256_CODE","createV0","createV1","other","toStringV0","toStringV1","toStringTag","deprecate","IS_CID_DEPRECATION","cidSymbol","encodeCID","remainder","decodeFirst","specs","inspectBytes","prefixSize","multihashSize","multihashBytes","digestBytes","digestSize","multihashCode","initialBytes","next","parseCIDtoBytes","cache","codeOffset","hashOffset","writable","range","console","warn"],"mappings":"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","file":"js/chunk-4fd6c8d4.73444ff4.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar base = require('./base.js');\n\nconst base16 = base.rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n});\nconst base16upper = base.rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n});\n\nexports.base16 = base16;\nexports.base16upper = base16upper;\n","'use strict'\n\nconst isIp = require('is-ip')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\nconst isIP = isIp\nconst isV4 = isIp.v4\nconst isV6 = isIp.v6\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L7\n// @ts-ignore - this is copied from the link above better to keep it the same\nconst toBytes = function (ip, buff, offset) {\n  offset = ~~offset\n\n  let result\n\n  if (isV4(ip)) {\n    result = buff || new Uint8Array(offset + 4)\n    // @ts-ignore\n    // eslint-disable-next-line array-callback-return\n    ip.split(/\\./g).map(function (byte) {\n      result[offset++] = parseInt(byte, 10) & 0xff\n    })\n  } else if (isV6(ip)) {\n    const sections = ip.split(':', 8)\n\n    let i\n    for (i = 0; i < sections.length; i++) {\n      const isv4 = isV4(sections[i])\n      let v4Buffer\n\n      if (isv4) {\n        v4Buffer = toBytes(sections[i])\n        sections[i] = uint8ArrayToString(v4Buffer.slice(0, 2), 'base16')\n      }\n\n      if (v4Buffer && ++i < 8) {\n        sections.splice(i, 0, uint8ArrayToString(v4Buffer.slice(2, 4), 'base16'))\n      }\n    }\n\n    if (sections[0] === '') {\n      while (sections.length < 8) sections.unshift('0')\n    } else if (sections[sections.length - 1] === '') {\n      while (sections.length < 8) sections.push('0')\n    } else if (sections.length < 8) {\n      for (i = 0; i < sections.length && sections[i] !== ''; i++);\n      const argv = [i, '1']\n      for (i = 9 - sections.length; i > 0; i--) {\n        argv.push('0')\n      }\n      sections.splice.apply(sections, argv)\n    }\n\n    result = buff || new Uint8Array(offset + 16)\n    for (i = 0; i < sections.length; i++) {\n      const word = parseInt(sections[i], 16)\n      result[offset++] = (word >> 8) & 0xff\n      result[offset++] = word & 0xff\n    }\n  }\n\n  if (!result) {\n    throw Error('Invalid ip address: ' + ip)\n  }\n\n  return result\n}\n\n// Copied from https://github.com/indutny/node-ip/blob/master/lib/ip.js#L63\n// @ts-ignore - this is copied from the link above better to keep it the same\nconst toString = function (buff, offset, length) {\n  offset = ~~offset\n  length = length || (buff.length - offset)\n\n  const result = []\n  let string\n  const view = new DataView(buff.buffer)\n  if (length === 4) {\n    // IPv4\n    for (let i = 0; i < length; i++) {\n      result.push(buff[offset + i])\n    }\n    string = result.join('.')\n  } else if (length === 16) {\n    // IPv6\n    for (let i = 0; i < length; i += 2) {\n      result.push(view.getUint16(offset + i).toString(16))\n    }\n    string = result.join(':')\n    string = string.replace(/(^|:)0(:0)*:0(:|$)/, '$1::$3')\n    string = string.replace(/:{3,4}/, '::')\n  }\n\n  return string\n}\n\nmodule.exports = {\n  isIP,\n  isV4,\n  isV6,\n  toBytes,\n  toString\n}\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar base = require('./base.js');\n\nconst base8 = base.rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n});\n\nexports.base8 = base8;\n","'use strict'\n\nconst {\n  URLWithLegacySupport,\n  format,\n  URLSearchParams,\n  defaultBase\n} = require('./src/url')\nconst relative = require('./src/relative')\n\nmodule.exports = {\n  URL: URLWithLegacySupport,\n  URLSearchParams,\n  format,\n  relative,\n  defaultBase\n}\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar base = require('./base.js');\n\nconst base32 = base.rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n});\nconst base32upper = base.rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n});\nconst base32pad = base.rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n});\nconst base32padupper = base.rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n});\nconst base32hex = base.rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n});\nconst base32hexupper = base.rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n});\nconst base32hexpad = base.rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n});\nconst base32hexpadupper = base.rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n});\nconst base32z = base.rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n});\n\nexports.base32 = base32;\nexports.base32hex = base32hex;\nexports.base32hexpad = base32hexpad;\nexports.base32hexpadupper = base32hexpadupper;\nexports.base32hexupper = base32hexupper;\nexports.base32pad = base32pad;\nexports.base32padupper = base32padupper;\nexports.base32upper = base32upper;\nexports.base32z = base32z;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar base = require('./base.js');\n\nconst base64 = base.rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n});\nconst base64pad = base.rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n});\nconst base64url = base.rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n});\nconst base64urlpad = base.rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n});\n\nexports.base64 = base64;\nexports.base64pad = base64pad;\nexports.base64url = base64url;\nexports.base64urlpad = base64urlpad;\n","'use strict'\n\nconst isReactNative =\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative'\n\nfunction getDefaultBase () {\n  if (isReactNative) {\n    return 'http://localhost'\n  }\n  // in some environments i.e. cloudflare workers location is not available\n  if (!self.location) {\n    return ''\n  }\n\n  return self.location.protocol + '//' + self.location.host\n}\n\nconst URL = self.URL\nconst defaultBase = getDefaultBase()\n\nclass URLWithLegacySupport {\n  constructor (url = '', base = defaultBase) {\n    this.super = new URL(url, base)\n    this.path = this.pathname + this.search\n    this.auth =\n            this.username && this.password\n              ? this.username + ':' + this.password\n              : null\n\n    this.query =\n            this.search && this.search.startsWith('?')\n              ? this.search.slice(1)\n              : null\n  }\n\n  get hash () {\n    return this.super.hash\n  }\n\n  get host () {\n    return this.super.host\n  }\n\n  get hostname () {\n    return this.super.hostname\n  }\n\n  get href () {\n    return this.super.href\n  }\n\n  get origin () {\n    return this.super.origin\n  }\n\n  get password () {\n    return this.super.password\n  }\n\n  get pathname () {\n    return this.super.pathname\n  }\n\n  get port () {\n    return this.super.port\n  }\n\n  get protocol () {\n    return this.super.protocol\n  }\n\n  get search () {\n    return this.super.search\n  }\n\n  get searchParams () {\n    return this.super.searchParams\n  }\n\n  get username () {\n    return this.super.username\n  }\n\n  set hash (hash) {\n    this.super.hash = hash\n  }\n\n  set host (host) {\n    this.super.host = host\n  }\n\n  set hostname (hostname) {\n    this.super.hostname = hostname\n  }\n\n  set href (href) {\n    this.super.href = href\n  }\n\n  set password (password) {\n    this.super.password = password\n  }\n\n  set pathname (pathname) {\n    this.super.pathname = pathname\n  }\n\n  set port (port) {\n    this.super.port = port\n  }\n\n  set protocol (protocol) {\n    this.super.protocol = protocol\n  }\n\n  set search (search) {\n    this.super.search = search\n  }\n\n  set username (username) {\n    this.super.username = username\n  }\n\n  /**\n   * @param {any} o\n   */\n  static createObjectURL (o) {\n    return URL.createObjectURL(o)\n  }\n\n  /**\n   * @param {string} o\n   */\n  static revokeObjectURL (o) {\n    URL.revokeObjectURL(o)\n  }\n\n  toJSON () {\n    return this.super.toJSON()\n  }\n\n  toString () {\n    return this.super.toString()\n  }\n\n  format () {\n    return this.toString()\n  }\n}\n\n/**\n * @param {string | import('url').UrlObject} obj\n */\nfunction format (obj) {\n  if (typeof obj === 'string') {\n    const url = new URL(obj)\n\n    return url.toString()\n  }\n\n  if (!(obj instanceof URL)) {\n    const userPass =\n            // @ts-ignore its not supported in node but we normalise\n            obj.username && obj.password\n              // @ts-ignore its not supported in node but we normalise\n              ? `${obj.username}:${obj.password}@`\n              : ''\n    const auth = obj.auth ? obj.auth + '@' : ''\n    const port = obj.port ? ':' + obj.port : ''\n    const protocol = obj.protocol ? obj.protocol + '//' : ''\n    const host = obj.host || ''\n    const hostname = obj.hostname || ''\n    const search = obj.search || (obj.query ? '?' + obj.query : '')\n    const hash = obj.hash || ''\n    const pathname = obj.pathname || ''\n    // @ts-ignore - path is not supported in node but we normalise\n    const path = obj.path || pathname + search\n\n    return `${protocol}${userPass || auth}${\n            host || hostname + port\n        }${path}${hash}`\n  }\n}\n\nmodule.exports = {\n  URLWithLegacySupport,\n  URLSearchParams: self.URLSearchParams,\n  defaultBase,\n  format\n}\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar bytes = require('../bytes.js');\nvar digest$1 = require('./digest.js');\n\nconst code = 0;\nconst name = 'identity';\nconst encode = bytes.coerce;\nconst digest = input => digest$1.create(code, encode(input));\nconst identity = {\n  code,\n  name,\n  encode,\n  digest\n};\n\nexports.identity = identity;\n","'use strict'\n\nconst codec = require('./codec')\nconst protocols = require('./protocols-table')\nconst varint = require('varint')\nconst { CID } = require('multiformats/cid')\nconst { base58btc } = require('multiformats/bases/base58')\nconst errCode = require('err-code')\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { equals: uint8ArrayEquals } = require('uint8arrays/equals')\n\n/**\n * @typedef {(addr: Multiaddr) => Promise<string[]>} Resolver\n * @typedef {string | Multiaddr | Uint8Array | null} MultiaddrInput\n * @typedef {import('./types').MultiaddrObject} MultiaddrObject\n * @typedef {import('./types').Protocol} Protocol\n */\n\n/** @type {Map<string, Resolver>} */\nconst resolvers = new Map()\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr')\n\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Uint8Array, String or another Multiaddr instance\n * public key.\n *\n */\nclass Multiaddr {\n  /**\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n   */\n  constructor (addr) {\n    // default\n    if (addr == null) {\n      addr = ''\n    }\n\n    // Define symbol\n    Object.defineProperty(this, symbol, { value: true })\n\n    if (addr instanceof Uint8Array) {\n      /** @type {Uint8Array} - The raw bytes representing this multiaddress */\n      this.bytes = codec.fromBytes(addr)\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\n      }\n      this.bytes = codec.fromString(addr)\n    } else if (Multiaddr.isMultiaddr(addr)) { // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes) // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr')\n    }\n  }\n\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toString () {\n    return codec.bytesToString(this.bytes)\n  }\n\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   *\n   * @example\n   * ```js\n   * JSON.stringify(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n   * ```\n   */\n  toOptions () {\n    /** @type {MultiaddrObject} */\n    const opts = {}\n    const parsed = this.toString().split('/')\n    opts.family = parsed[1] === 'ip4' ? 4 : 6\n    opts.host = parsed[2]\n    opts.transport = parsed[3]\n    opts.port = parseInt(parsed[4])\n    return opts\n  }\n\n  /**\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n   * left-to-right order. Each object contains the protocol code, protocol name,\n   * and the size of its address space in bits.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n   * // [ { code: 4, size: 32, name: 'ip4' },\n   * //   { code: 6, size: 16, name: 'tcp' } ]\n   * ```\n   *\n   * @returns {Protocol[]} protocols - All the protocols the address is composed of\n   */\n  protos () {\n    return this.protoCodes().map(code => Object.assign({}, protocols(code)))\n  }\n\n  /**\n   * Returns the codes of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n   * // [ 4, 6 ]\n   * ```\n   *\n   * @returns {number[]} protocol codes\n   */\n  protoCodes () {\n    const codes = []\n    const buf = this.bytes\n    let i = 0\n    while (i < buf.length) {\n      const code = varint.decode(buf, i)\n      const n = varint.decode.bytes\n\n      const p = protocols(code)\n      const size = codec.sizeForAddr(p, buf.slice(i + n))\n\n      i += (size + n)\n      codes.push(code)\n    }\n\n    return codes\n  }\n\n  /**\n   * Returns the names of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n   * // [ 'ip4', 'tcp' ]\n   * ```\n   *\n   * @returns {string[]} protocol names\n   */\n  protoNames () {\n    return this.protos().map(proto => proto.name)\n  }\n\n  /**\n   * Returns a tuple of parts\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n   * ```\n   */\n  tuples () {\n    return codec.bytesToTuples(this.bytes)\n  }\n\n  /**\n   * Returns a tuple of string/number parts\n   * - tuples[][0] = code of protocol\n   * - tuples[][1] = contents of address\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n   * ```\n   */\n  stringTuples () {\n    const t = codec.bytesToTuples(this.bytes)\n    return codec.tuplesToStringTuples(t)\n  }\n\n  /**\n   * Encapsulates a Multiaddr in another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.toString()\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n   * ```\n   *\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n   */\n  encapsulate (addr) {\n    addr = new Multiaddr(addr)\n    return new Multiaddr(this.toString() + addr.toString())\n  }\n\n  /**\n   * Decapsulates a Multiaddr from another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.decapsulate(mh2).toString()\n   * // '/ip4/8.8.8.8/tcp/1080'\n   * ```\n   *\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n   * @returns {Multiaddr}\n   */\n  decapsulate (addr) {\n    const addrString = addr.toString()\n    const s = this.toString()\n    const i = s.lastIndexOf(addrString)\n    if (i < 0) {\n      throw new Error('Address ' + this + ' does not contain subaddress: ' + addr)\n    }\n    return new Multiaddr(s.slice(0, i))\n  }\n\n  /**\n   * A more reliable version of `decapsulate` if you are targeting a\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\n   * If the code is not present, the original `Multiaddr` is returned.\n   *\n   * @example\n   * ```js\n   * const addr = new Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n   * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>\n   *\n   * addr.decapsulateCode(421).toString()\n   * // '/ip4/0.0.0.0/tcp/8080'\n   *\n   * new Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n   * // '/ip4/127.0.0.1/tcp/8080'\n   * ```\n   *\n   * @param {number} code - The code of the protocol to decapsulate from this Multiaddr\n   * @returns {Multiaddr}\n   */\n  decapsulateCode (code) {\n    const tuples = this.tuples()\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new Multiaddr(codec.tuplesToBytes(tuples.slice(0, i)))\n      }\n    }\n    return this\n  }\n\n  /**\n   * Extract the peerId if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\n   *\n   * // should return QmValidBase58string or null if the id is missing or invalid\n   * const peerId = mh1.getPeerId()\n   * ```\n   *\n   * @returns {string | null} peerId - The id of the peer or null if invalid or missing from the ma\n   */\n  getPeerId () {\n    try {\n      const tuples = this.stringTuples().filter((tuple) => {\n        if (tuple[0] === protocols.names.ipfs.code) {\n          return true\n        }\n        return false\n      })\n\n      // Get the last ipfs tuple ['ipfs', 'peerid string']\n      const tuple = tuples.pop()\n      if (tuple && tuple[1]) {\n        const peerIdStr = tuple[1]\n\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc')\n        }\n\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc')\n      }\n\n      return null\n    } catch (e) {\n      return null\n    }\n  }\n\n  /**\n   * Extract the path if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>\n   *\n   * // should return utf8 string or null if the id is missing or invalid\n   * const path = mh1.getPath()\n   * ```js\n   *\n   * @returns {string | null} path - The path of the multiaddr, or null if no path protocol is present\n   */\n  getPath () {\n    let path = null\n    try {\n      path = this.stringTuples().filter((tuple) => {\n        const proto = protocols(tuple[0])\n        if (proto.path) {\n          return true\n        }\n        return false\n      })[0][1]\n\n      if (!path) {\n        path = null\n      }\n    } catch (e) {\n      path = null\n    }\n    return path\n  }\n\n  /**\n   * Checks if two Multiaddrs are the same\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * mh1.equals(mh1)\n   * // true\n   *\n   * mh1.equals(mh2)\n   * // false\n   * ```\n   *\n   * @param {Multiaddr} addr\n   * @returns {boolean}\n   */\n  equals (addr) {\n    return uint8ArrayEquals(this.bytes, addr.bytes)\n  }\n\n  /**\n   * Resolve multiaddr if containing resolvable hostname.\n   *\n   * @example\n   * ```js\n   * Multiaddr.resolvers.set('dnsaddr', resolverFunction)\n   * const mh1 = new Multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n   * const resolvedMultiaddrs = await mh1.resolve()\n   * // [\n   * //   <Multiaddr 04934b5353060fa1a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b53530601bbde03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b535391020fa1cc03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>\n   * // ]\n   * ```\n   *\n   * @returns {Promise<Array<Multiaddr>>}\n   */\n  async resolve () {\n    const resolvableProto = this.protos().find((p) => p.resolvable)\n\n    // Multiaddr is not resolvable?\n    if (!resolvableProto) {\n      return [this]\n    }\n\n    const resolver = resolvers.get(resolvableProto.name)\n    if (!resolver) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER')\n    }\n\n    const addresses = await resolver(this)\n    return addresses.map((a) => new Multiaddr(a))\n  }\n\n  /**\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\n   * is left out: in Node (and most network systems) the protocol is unknowable\n   * given only the address.\n   *\n   * Has to be a ThinWaist Address, otherwise throws error\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n   * // {family: 4, address: '127.0.0.1', port: 4001}\n   * ```\n   *\n   * @returns {{family: 4 | 6, address: string, port: number}}\n   * @throws {Error} Throws error if Multiaddr is not a Thin Waist address\n   */\n  nodeAddress () {\n    const codes = this.protoCodes()\n    const names = this.protoNames()\n    const parts = this.toString().split('/').slice(1)\n\n    if (parts.length < 4) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}\".')\n    } else if (codes[0] !== 4 && codes[0] !== 41 && codes[0] !== 54 && codes[0] !== 55) {\n      throw new Error(`no protocol with name: \"'${names[0]}'\". Must have a valid family name: \"{ip4, ip6, dns4, dns6}\".`)\n    } else if (parts[2] !== 'tcp' && parts[2] !== 'udp') {\n      throw new Error(`no protocol with name: \"'${names[1]}'\". Must have a valid transport protocol: \"{tcp, udp}\".`)\n    }\n\n    return {\n      family: (codes[0] === 41 || codes[0] === 55) ? 6 : 4,\n      address: parts[1],\n      port: parseInt(parts[3]) // tcp or udp port\n    }\n  }\n\n  /**\n   * Returns if a Multiaddr is a Thin Waist address or not.\n   *\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\n   *\n   * `{IPv4, IPv6}/{TCP, UDP}`\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * const mh2 = new Multiaddr('/ip4/192.168.2.1/tcp/5001')\n   * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\n   * const mh4 = new Multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n   * // <Multiaddr 047f0000010607d0de039302a503221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a64835843 - /ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a>\n   * mh1.isThinWaistAddress()\n   * // true\n   * mh2.isThinWaistAddress()\n   * // true\n   * mh3.isThinWaistAddress()\n   * // false\n   * mh4.isThinWaistAddress()\n   * // false\n   * ```\n   *\n   * @param {Multiaddr} [addr] - Defaults to using `this` instance\n   */\n  isThinWaistAddress (addr) {\n    const protos = (addr || this).protos()\n\n    if (protos.length !== 2) {\n      return false\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Creates a Multiaddr from a node-friendly address object\n   *\n   * @example\n   * ```js\n   * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {{family: 4 | 6, address: string, port: number}} addr\n   * @param {string} transport\n   */\n  static fromNodeAddress (addr, transport) {\n    if (!addr) { throw new Error('requires node address object') }\n    if (!transport) { throw new Error('requires transport protocol') }\n    let ip\n    switch (addr.family) {\n      case 4:\n        ip = 'ip4'\n        break\n      case 6:\n        ip = 'ip6'\n        break\n      default:\n        throw Error(`Invalid addr family. Got '${addr.family}' instead of 4 or 6`)\n    }\n    return new Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'))\n  }\n\n  /**\n   * Returns if something is a Multiaddr that is a name\n   *\n   * @param {Multiaddr} addr\n   * @returns {boolean} isName\n   */\n  static isName (addr) {\n    if (!Multiaddr.isMultiaddr(addr)) {\n      return false\n    }\n\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable)\n  }\n\n  /**\n   * Check if object is a CID instance\n   *\n   * @param {any} value\n   * @returns {value is Multiaddr}\n   */\n  static isMultiaddr (value) {\n    return value instanceof Multiaddr || Boolean(value && value[symbol])\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * For post Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   *\n   * @returns {string}\n   */\n  [inspect] () {\n    return '<Multiaddr ' +\n    uint8ArrayToString(this.bytes, 'base16') + ' - ' +\n    codec.bytesToString(this.bytes) + '>'\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * Fallback for pre Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   *\n   * @returns {string}\n   */\n  inspect () {\n    return '<Multiaddr ' +\n      uint8ArrayToString(this.bytes, 'base16') + ' - ' +\n      codec.bytesToString(this.bytes) + '>'\n  }\n}\n\n/**\n * Object containing table, names and codes of all supported protocols.\n * To get the protocol values from a Multiaddr, you can use\n * [`.protos()`](#multiaddrprotos),\n * [`.protoCodes()`](#multiaddrprotocodes) or\n * [`.protoNames()`](#multiaddrprotonames)\n *\n * @returns {{table: Array, names: Object, codes: Object}}\n */\nMultiaddr.protocols = protocols\n\nMultiaddr.resolvers = resolvers\n\n/**\n * Static factory\n *\n * @param {MultiaddrInput} addr\n */\nfunction multiaddr (addr) {\n  return new Multiaddr(addr)\n}\n\nmodule.exports = { Multiaddr, multiaddr, protocols, resolvers }\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar bytes = require('../bytes.js');\nvar varint = require('../varint.js');\n\nconst create = (code, digest) => {\n  const size = digest.byteLength;\n  const sizeOffset = varint.encodingLength(code);\n  const digestOffset = sizeOffset + varint.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\nconst decode = multihash => {\n  const bytes$1 = bytes.coerce(multihash);\n  const [code, sizeOffset] = varint.decode(bytes$1);\n  const [size, digestOffset] = varint.decode(bytes$1.subarray(sizeOffset));\n  const digest = bytes$1.subarray(sizeOffset + digestOffset);\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n  return new Digest(code, size, digest, bytes$1);\n};\nconst equals = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && bytes.equals(a.bytes, b.bytes);\n  }\n};\nclass Digest {\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n}\n\nexports.Digest = Digest;\nexports.create = create;\nexports.decode = decode;\nexports.equals = equals;\n","'use strict';\n\nconst word = '[a-fA-F\\\\d:]';\nconst b = options => options && options.includeBoundaries ?\n\t`(?:(?<=\\\\s|^)(?=${word})|(?<=${word})(?=\\\\s|$))` :\n\t'';\n\nconst v4 = '(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}';\n\nconst v6seg = '[a-fA-F\\\\d]{1,4}';\nconst v6 = `\n(?:\n(?:${v6seg}:){7}(?:${v6seg}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:${v6seg}:){6}(?:${v4}|:${v6seg}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:${v6seg}:){5}(?::${v4}|(?::${v6seg}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:${v6seg}:){4}(?:(?::${v6seg}){0,1}:${v4}|(?::${v6seg}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:${v6seg}:){3}(?:(?::${v6seg}){0,2}:${v4}|(?::${v6seg}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:${v6seg}:){2}(?:(?::${v6seg}){0,3}:${v4}|(?::${v6seg}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:${v6seg}:){1}(?:(?::${v6seg}){0,4}:${v4}|(?::${v6seg}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::${v6seg}){0,5}:${v4}|(?::${v6seg}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n`.replace(/\\s*\\/\\/.*$/gm, '').replace(/\\n/g, '').trim();\n\n// Pre-compile only the exact regexes because adding a global flag make regexes stateful\nconst v46Exact = new RegExp(`(?:^${v4}$)|(?:^${v6}$)`);\nconst v4exact = new RegExp(`^${v4}$`);\nconst v6exact = new RegExp(`^${v6}$`);\n\nconst ip = options => options && options.exact ?\n\tv46Exact :\n\tnew RegExp(`(?:${b(options)}${v4}${b(options)})|(?:${b(options)}${v6}${b(options)})`, 'g');\n\nip.v4 = options => options && options.exact ? v4exact : new RegExp(`${b(options)}${v4}${b(options)}`, 'g');\nip.v6 = options => options && options.exact ? v6exact : new RegExp(`${b(options)}${v6}${b(options)}`, 'g');\n\nmodule.exports = ip;\n","'use strict'\n\nconst { URLWithLegacySupport, format } = require('./url')\n\n/**\n * @param {string | undefined} url\n * @param {any} [location]\n * @param {any} [protocolMap]\n * @param {any} [defaultProtocol]\n */\nmodule.exports = (url, location = {}, protocolMap = {}, defaultProtocol) => {\n  let protocol = location.protocol\n    ? location.protocol.replace(':', '')\n    : 'http'\n\n  // Check protocol map\n  protocol = (protocolMap[protocol] || defaultProtocol || protocol) + ':'\n  let urlParsed\n\n  try {\n    urlParsed = new URLWithLegacySupport(url)\n  } catch (err) {\n    urlParsed = {}\n  }\n\n  const base = Object.assign({}, location, {\n    protocol: protocol || urlParsed.protocol,\n    host: location.host || urlParsed.host\n  })\n\n  return new URLWithLegacySupport(url, format(base)).toString()\n}\n","module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l || shift > 49) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar base = require('./base.js');\n\nconst base36 = base.baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n});\nconst base36upper = base.baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n});\n\nexports.base36 = base36;\nexports.base36upper = base36upper;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar asUint8array = require('./util/as-uint8array.js');\n\nfunction alloc(size = 0) {\n  if (globalThis.Buffer != null && globalThis.Buffer.alloc != null) {\n    return asUint8array.asUint8Array(globalThis.Buffer.alloc(size));\n  }\n  return new Uint8Array(size);\n}\nfunction allocUnsafe(size = 0) {\n  if (globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null) {\n    return asUint8array.asUint8Array(globalThis.Buffer.allocUnsafe(size));\n  }\n  return new Uint8Array(size);\n}\n\nexports.alloc = alloc;\nexports.allocUnsafe = allocUnsafe;\n","'use strict';\n\nvar encode_1 = encode;\nvar MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n  while (num >= INT) {\n    out[offset++] = num & 255 | MSB;\n    num /= 128;\n  }\n  while (num & MSBALL) {\n    out[offset++] = num & 255 | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  encode.bytes = offset - oldOffset + 1;\n  return out;\n}\nvar decode = read;\nvar MSB$1 = 128, REST$1 = 127;\nfunction read(buf, offset) {\n  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint');\n    }\n    b = buf[counter++];\n    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1);\n  read.bytes = counter - offset;\n  return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (value) {\n  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;\n};\nvar varint = {\n  encode: encode_1,\n  decode: decode,\n  encodingLength: length\n};\nvar _brrp_varint = varint;\nvar varint$1 = _brrp_varint;\n\nmodule.exports = varint$1;\n","'use strict';\n\nfunction base(ALPHABET, name) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256);\n  var iFACTOR = Math.log(256) / Math.log(BASE);\n  function encode(source) {\n    if (source instanceof Uint8Array);\n    else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError('Expected Uint8Array');\n    }\n    if (source.length === 0) {\n      return '';\n    }\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size);\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      pbegin++;\n    }\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n    var psz = 0;\n    if (source[psz] === ' ') {\n      return;\n    }\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    var size = (source.length - psz) * FACTOR + 1 >>> 0;\n    var b256 = new Uint8Array(size);\n    while (source[psz]) {\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n      if (carry === 255) {\n        return;\n      }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      psz++;\n    }\n    if (source[psz] === ' ') {\n      return;\n    }\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error(`Non-${ name } character`);\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\n\nmodule.exports = _brrp__multiformats_scope_baseX;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\nconst name = 'json';\nconst code = 512;\nconst encode = node => textEncoder.encode(JSON.stringify(node));\nconst decode = data => JSON.parse(textDecoder.decode(data));\n\nexports.code = code;\nexports.decode = decode;\nexports.encode = encode;\nexports.name = name;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar hasher = require('./hasher.js');\n\nconst sha = name => async data => new Uint8Array(await crypto.subtle.digest(name, data));\nconst sha256 = hasher.from({\n  name: 'sha2-256',\n  code: 18,\n  encode: sha('SHA-256')\n});\nconst sha512 = hasher.from({\n  name: 'sha2-512',\n  code: 19,\n  encode: sha('SHA-512')\n});\n\nexports.sha256 = sha256;\nexports.sha512 = sha512;\n","'use strict'\n\nconst { Multiaddr } = require('multiaddr')\n\n/**\n * @typedef {import('./types').MatchesFunction} MatchesFunction\n * @typedef {import('./types').PartialMatchesFunction} PartialMatchesFunction\n * @typedef {import('./types').Mafmt} Mafmt\n */\n\n/*\n * Valid combinations\n */\nconst DNS4 = base('dns4')\nconst DNS6 = base('dns6')\nconst DNSADDR = base('dnsaddr')\nconst DNS = or(\n  base('dns'),\n  DNSADDR,\n  DNS4,\n  DNS6\n)\n\nconst IP = or(base('ip4'), base('ip6'))\nconst TCP = or(\n  and(IP, base('tcp')),\n  and(DNS, base('tcp'))\n)\nconst UDP = and(IP, base('udp'))\nconst UTP = and(UDP, base('utp'))\n\nconst QUIC = and(UDP, base('quic'))\n\nconst WebSockets = or(\n  and(TCP, base('ws')),\n  and(DNS, base('ws'))\n)\n\nconst WebSocketsSecure = or(\n  and(TCP, base('wss')),\n  and(DNS, base('wss'))\n)\n\nconst HTTP = or(\n  and(TCP, base('http')),\n  and(IP, base('http')),\n  and(DNS, base('http'))\n)\n\nconst HTTPS = or(\n  and(TCP, base('https')),\n  and(IP, base('https')),\n  and(DNS, base('https'))\n)\n\nconst WebRTCStar = or(\n  and(WebSockets, base('p2p-webrtc-star'), base('p2p')),\n  and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')),\n  and(WebSockets, base('p2p-webrtc-star')),\n  and(WebSocketsSecure, base('p2p-webrtc-star'))\n)\n\nconst WebSocketStar = or(\n  and(WebSockets, base('p2p-websocket-star'), base('p2p')),\n  and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')),\n  and(WebSockets, base('p2p-websocket-star')),\n  and(WebSocketsSecure, base('p2p-websocket-star'))\n)\n\nconst WebRTCDirect = or(\n  and(HTTP, base('p2p-webrtc-direct'), base('p2p')),\n  and(HTTPS, base('p2p-webrtc-direct'), base('p2p')),\n  and(HTTP, base('p2p-webrtc-direct')),\n  and(HTTPS, base('p2p-webrtc-direct'))\n)\n\nconst Reliable = or(\n  WebSockets,\n  WebSocketsSecure,\n  HTTP,\n  HTTPS,\n  WebRTCStar,\n  WebRTCDirect,\n  TCP,\n  UTP,\n  QUIC,\n  DNS\n)\n\n// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\nconst Stardust = or(\n  and(Reliable, base('p2p-stardust'), base('p2p')),\n  and(Reliable, base('p2p-stardust'))\n)\n\nconst _P2P = or(\n  and(Reliable, base('p2p')),\n  WebRTCStar,\n  WebRTCDirect,\n  base('p2p')\n)\n\nconst _Circuit = or(\n  and(_P2P, base('p2p-circuit'), _P2P),\n  and(_P2P, base('p2p-circuit')),\n  and(base('p2p-circuit'), _P2P),\n  and(Reliable, base('p2p-circuit')),\n  and(base('p2p-circuit'), Reliable),\n  base('p2p-circuit')\n)\n\nconst CircuitRecursive = () => or(\n  and(_Circuit, CircuitRecursive),\n  _Circuit\n)\n\nconst Circuit = CircuitRecursive()\n\nconst P2P = or(\n  and(Circuit, _P2P, Circuit),\n  and(_P2P, Circuit),\n  and(Circuit, _P2P),\n  Circuit,\n  _P2P\n)\n\nmodule.exports = {\n  DNS,\n  DNS4,\n  DNS6,\n  DNSADDR,\n  IP,\n  TCP,\n  UDP,\n  QUIC,\n  UTP,\n  HTTP,\n  HTTPS,\n  WebSockets,\n  WebSocketsSecure,\n  WebSocketStar,\n  WebRTCStar,\n  WebRTCDirect,\n  Reliable,\n  Stardust,\n  Circuit,\n  P2P,\n  IPFS: P2P\n}\n\n/*\n * Validation funcs\n */\n\n/**\n * @param {PartialMatchesFunction} partialMatch\n */\nfunction makeMatchesFunction (partialMatch) {\n  /**\n   * @type {MatchesFunction}\n   */\n  function matches (a) {\n    if (!Multiaddr.isMultiaddr(a)) {\n      try {\n        a = new Multiaddr(a)\n      } catch (err) { // catch error\n        return false // also if it's invalid it's propably not matching as well so return false\n      }\n    }\n    const out = partialMatch(a.protoNames())\n    if (out === null) {\n      return false\n    }\n\n    if (out === true || out === false) {\n      return out\n    }\n\n    return out.length === 0\n  }\n\n  return matches\n}\n\n/**\n * @param {Array<Mafmt | (() => Mafmt)>} args\n * @returns {Mafmt}\n */\nfunction and (...args) {\n  /**\n   * @type {PartialMatchesFunction}\n   */\n  function partialMatch (a) {\n    if (a.length < args.length) {\n      return null\n    }\n\n    /** @type {boolean | string[] | null} */\n    let out = a\n\n    args.some((arg) => {\n      out = typeof arg === 'function'\n        ? arg().partialMatch(a)\n        : arg.partialMatch(a)\n\n      if (Array.isArray(out)) {\n        a = out\n      }\n\n      if (out === null) {\n        return true\n      }\n\n      return false\n    })\n\n    return out\n  }\n\n  return {\n    toString: function () { return '{ ' + args.join(' ') + ' }' },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch: partialMatch\n  }\n}\n\n/**\n * @param {Array<Mafmt | (() => Mafmt)>} args\n * @returns {Mafmt}\n */\nfunction or (...args) {\n  /**\n   * @type {PartialMatchesFunction}\n   */\n  function partialMatch (a) {\n    let out = null\n    args.some((arg) => {\n      const res = typeof arg === 'function'\n        ? arg().partialMatch(a)\n        : arg.partialMatch(a)\n      if (res) {\n        out = res\n        return true\n      }\n      return false\n    })\n\n    return out\n  }\n\n  const result = {\n    toString: function () { return '{ ' + args.join(' ') + ' }' },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch: partialMatch\n  }\n\n  return result\n}\n\n/**\n * @param {string} n\n * @returns {Mafmt}\n */\nfunction base (n) {\n  const name = n\n\n  /**\n   * @type {MatchesFunction}\n   */\n  function matches (a) {\n    let ma\n\n    if (typeof a === 'string' || a instanceof Uint8Array) {\n      try {\n        ma = new Multiaddr(a)\n      } catch (err) { // catch error\n        return false // also if it's invalid it's probably not matching as well so return false\n      }\n    } else {\n      ma = a\n    }\n\n    const pnames = ma.protoNames()\n    if (pnames.length === 1 && pnames[0] === name) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * @type {PartialMatchesFunction}\n   */\n  function partialMatch (protos) {\n    if (protos.length === 0) {\n      return null\n    }\n\n    if (protos[0] === name) {\n      return protos.slice(1)\n    }\n    return null\n  }\n\n  return {\n    toString: function () { return name },\n    matches: matches,\n    partialMatch: partialMatch\n  }\n}\n","'use strict'\n/** @typedef {import(\"./types\").Protocol} Protocol */\n\n/**\n * Protocols\n *\n * @param {number | string} proto\n * @returns {Protocol}\n */\nfunction Protocols (proto) {\n  if (typeof (proto) === 'number') {\n    if (Protocols.codes[proto]) {\n      return Protocols.codes[proto]\n    }\n\n    throw new Error('no protocol with code: ' + proto)\n  } else if (typeof (proto) === 'string') {\n    if (Protocols.names[proto]) {\n      return Protocols.names[proto]\n    }\n\n    throw new Error('no protocol with name: ' + proto)\n  }\n\n  throw new Error('invalid protocol id type: ' + proto)\n}\n\nconst V = -1\nProtocols.lengthPrefixedVarSize = V\nProtocols.V = V\n\n/** @type {Array<[number, number, string, (string|boolean)?, string?]>} */\nProtocols.table = [\n  [4, 32, 'ip4'],\n  [6, 16, 'tcp'],\n  [33, 16, 'dccp'],\n  [41, 128, 'ip6'],\n  [42, V, 'ip6zone'],\n  [53, V, 'dns', 'resolvable'],\n  [54, V, 'dns4', 'resolvable'],\n  [55, V, 'dns6', 'resolvable'],\n  [56, V, 'dnsaddr', 'resolvable'],\n  [132, 16, 'sctp'],\n  [273, 16, 'udp'],\n  [275, 0, 'p2p-webrtc-star'],\n  [276, 0, 'p2p-webrtc-direct'],\n  [277, 0, 'p2p-stardust'],\n  [290, 0, 'p2p-circuit'],\n  [301, 0, 'udt'],\n  [302, 0, 'utp'],\n  [400, V, 'unix', false, 'path'],\n  // `ipfs` is added before `p2p` for legacy support.\n  // All text representations will default to `p2p`, but `ipfs` will\n  // still be supported\n  [421, V, 'ipfs'],\n  // `p2p` is the preferred name for 421, and is now the default\n  [421, V, 'p2p'],\n  [443, 0, 'https'],\n  [444, 96, 'onion'],\n  [445, 296, 'onion3'],\n  [446, V, 'garlic64'],\n  [460, 0, 'quic'],\n  [477, 0, 'ws'],\n  [478, 0, 'wss'],\n  [479, 0, 'p2p-websocket-star'],\n  [480, 0, 'http'],\n  [777, V, 'memory']\n]\n/** @type {Record<string,Protocol>} */\nProtocols.names = {}\n/** @type {Record<number,Protocol>} */\nProtocols.codes = {}\n\n// populate tables\nProtocols.table.map(row => {\n  const proto = p.apply(null, row)\n  Protocols.codes[proto.code] = proto\n  Protocols.names[proto.name] = proto\n  return null\n})\n\nProtocols.object = p\n\n/**\n *\n * Create a protocol\n *\n * @param {number} code\n * @param {number} size\n * @param {string} name\n * @param {any} [resolvable]\n * @param {any} [path]\n * @returns {Protocol}\n */\nfunction p (code, size, name, resolvable, path) {\n  return {\n    code,\n    size,\n    name,\n    resolvable: Boolean(resolvable),\n    path: Boolean(path)\n  }\n}\n\nmodule.exports = Protocols\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar base = require('./base.js');\nvar bytes = require('../bytes.js');\n\nconst identity = base.from({\n  prefix: '\\0',\n  name: 'identity',\n  encode: buf => bytes.toString(buf),\n  decode: str => bytes.fromString(str)\n});\n\nexports.identity = identity;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar bytes = require('../bytes.js');\n\nconst name = 'raw';\nconst code = 85;\nconst encode = node => bytes.coerce(node);\nconst decode = data => bytes.coerce(data);\n\nexports.code = code;\nexports.decode = decode;\nexports.encode = encode;\nexports.name = name;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar digest = require('./digest.js');\n\nconst from = ({name, code, encode}) => new Hasher(name, code, encode);\nclass Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? digest.create(this.code, result) : result.then(digest$1 => digest.create(this.code, digest$1));\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\n\nexports.Hasher = Hasher;\nexports.from = from;\n","'use strict'\n\nconst ip = require('./ip')\nconst protocols = require('./protocols-table')\nconst { CID } = require('multiformats/cid')\nconst { base32 } = require('multiformats/bases/base32')\nconst { base58btc } = require('multiformats/bases/base58')\nconst Digest = require('multiformats/hashes/digest')\nconst varint = require('varint')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { fromString: uint8ArrayFromString } = require('uint8arrays/from-string')\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\n\nmodule.exports = Convert\n\n// converts (serializes) addresses\n/**\n * @param {string} proto\n * @param {string | Uint8Array} a\n */\nfunction Convert (proto, a) {\n  if (a instanceof Uint8Array) {\n    return Convert.toString(proto, a)\n  } else {\n    return Convert.toBytes(proto, a)\n  }\n}\n\n/**\n * Convert [code,Uint8Array] to string\n *\n * @param {number|string} proto\n * @param {Uint8Array} buf\n * @returns {string}\n */\nConvert.toString = function convertToString (proto, buf) {\n  const protocol = protocols(proto)\n  switch (protocol.code) {\n    case 4: // ipv4\n    case 41: // ipv6\n      return bytes2ip(buf)\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return bytes2port(buf).toString()\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 777: // memory\n      return bytes2str(buf)\n\n    case 421: // ipfs\n      return bytes2mh(buf)\n    case 444: // onion\n      return bytes2onion(buf)\n    case 445: // onion3\n      return bytes2onion(buf)\n    default:\n      return uint8ArrayToString(buf, 'base16') // no clue. convert to hex\n  }\n}\n\nConvert.toBytes = function convertToBytes (/** @type {string | number } */ proto, /** @type {string} */ str) {\n  const protocol = protocols(proto)\n  switch (protocol.code) {\n    case 4: // ipv4\n      return ip2bytes(str)\n    case 41: // ipv6\n      return ip2bytes(str)\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return port2bytes(parseInt(str, 10))\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 777: // memory\n      return str2bytes(str)\n\n    case 421: // ipfs\n      return mh2bytes(str)\n    case 444: // onion\n      return onion2bytes(str)\n    case 445: // onion3\n      return onion32bytes(str)\n    default:\n      return uint8ArrayFromString(str, 'base16') // no clue. convert from hex\n  }\n}\n\n/**\n * @param {string} ipString\n */\nfunction ip2bytes (ipString) {\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ip.toBytes(ipString)\n}\n\n/**\n * @param {Uint8Array} ipBuff\n */\nfunction bytes2ip (ipBuff) {\n  const ipString = ip.toString(ipBuff)\n  if (!ipString || !ip.isIP(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ipString\n}\n\n/**\n * @param {number} port\n */\nfunction port2bytes (port) {\n  const buf = new ArrayBuffer(2)\n  const view = new DataView(buf)\n  view.setUint16(0, port)\n\n  return new Uint8Array(buf)\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction bytes2port (buf) {\n  const view = new DataView(buf.buffer)\n  return view.getUint16(buf.byteOffset)\n}\n\n/**\n * @param {string} str\n */\nfunction str2bytes (str) {\n  const buf = uint8ArrayFromString(str)\n  const size = Uint8Array.from(varint.encode(buf.length))\n  return uint8ArrayConcat([size, buf], size.length + buf.length)\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction bytes2str (buf) {\n  const size = varint.decode(buf)\n  buf = buf.slice(varint.decode.bytes)\n\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return uint8ArrayToString(buf)\n}\n\n/**\n * @param {string} hash - base58btc string\n */\nfunction mh2bytes (hash) {\n  let mh\n\n  if (hash[0] === 'Q' || hash[0] === '1') {\n    mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes\n  } else {\n    mh = CID.parse(hash).multihash.bytes\n  }\n\n  // the address is a varint prefixed multihash string representation\n  const size = Uint8Array.from(varint.encode(mh.length))\n  return uint8ArrayConcat([size, mh], size.length + mh.length)\n}\n\n/**\n * Converts bytes to bas58btc string\n *\n * @param {Uint8Array} buf\n * @returns {string} base58btc string\n */\nfunction bytes2mh (buf) {\n  const size = varint.decode(buf)\n  const address = buf.slice(varint.decode.bytes)\n\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return uint8ArrayToString(address, 'base58btc')\n}\n\n/**\n * @param {string} str\n */\nfunction onion2bytes (str) {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number')\n  }\n  if (addr[0].length !== 16) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion address.')\n  }\n\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = base32.decode('b' + addr[0])\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2bytes(port)\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\n}\n\n/**\n * @param {string} str\n */\nfunction onion32bytes (str) {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number')\n  }\n  if (addr[0].length !== 56) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion3 address.')\n  }\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = base32.decode('b' + addr[0])\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2bytes(port)\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length)\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction bytes2onion (buf) {\n  const addrBytes = buf.slice(0, buf.length - 2)\n  const portBytes = buf.slice(buf.length - 2)\n  const addr = uint8ArrayToString(addrBytes, 'base32')\n  const port = bytes2port(portBytes)\n  return addr + ':' + port\n}\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar alloc = require('./alloc.js');\nvar asUint8array = require('./util/as-uint8array.js');\n\nfunction concat(arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0);\n  }\n  const output = alloc.allocUnsafe(length);\n  let offset = 0;\n  for (const arr of arrays) {\n    output.set(arr, offset);\n    offset += arr.length;\n  }\n  return asUint8array.asUint8Array(output);\n}\n\nexports.concat = concat;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar varint$1 = require('../vendor/varint.js');\n\nconst decode = data => {\n  const code = varint$1.decode(data);\n  return [\n    code,\n    varint$1.decode.bytes\n  ];\n};\nconst encodeTo = (int, target, offset = 0) => {\n  varint$1.encode(int, target, offset);\n  return target;\n};\nconst encodingLength = int => {\n  return varint$1.encodingLength(int);\n};\n\nexports.decode = decode;\nexports.encodeTo = encodeTo;\nexports.encodingLength = encodingLength;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar identity = require('./bases/identity.js');\nvar base2 = require('./bases/base2.js');\nvar base8 = require('./bases/base8.js');\nvar base10 = require('./bases/base10.js');\nvar base16 = require('./bases/base16.js');\nvar base32 = require('./bases/base32.js');\nvar base36 = require('./bases/base36.js');\nvar base58 = require('./bases/base58.js');\nvar base64 = require('./bases/base64.js');\nvar sha2 = require('./hashes/sha2.js');\nvar identity$1 = require('./hashes/identity.js');\nvar raw = require('./codecs/raw.js');\nvar json = require('./codecs/json.js');\nrequire('./index.js');\nvar cid = require('./cid.js');\nvar hasher = require('./hashes/hasher.js');\nvar digest = require('./hashes/digest.js');\nvar varint = require('./varint.js');\nvar bytes = require('./bytes.js');\n\nconst bases = {\n  ...identity,\n  ...base2,\n  ...base8,\n  ...base10,\n  ...base16,\n  ...base32,\n  ...base36,\n  ...base58,\n  ...base64\n};\nconst hashes = {\n  ...sha2,\n  ...identity$1\n};\nconst codecs = {\n  raw,\n  json\n};\n\nexports.CID = cid.CID;\nexports.hasher = hasher;\nexports.digest = digest;\nexports.varint = varint;\nexports.bytes = bytes;\nexports.bases = bases;\nexports.codecs = codecs;\nexports.hashes = hashes;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction equals(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (a.byteLength !== b.byteLength) {\n    return false;\n  }\n  for (let i = 0; i < a.byteLength; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexports.equals = equals;\n","'use strict'\n\nconst { base58btc } = require('multiformats/bases/base58')\nconst { base32 } = require('multiformats/bases/base32')\nconst Digest = require('multiformats/hashes/digest')\nconst { Multiaddr } = require('multiaddr')\nconst mafmt = require('mafmt')\nconst { CID } = require('multiformats/cid')\nconst { URL } = require('iso-url')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\nconst pathGatewayPattern = /^https?:\\/\\/[^/]+\\/(ip[fn]s)\\/([^/?#]+)/\nconst pathPattern = /^\\/(ip[fn]s)\\/([^/?#]+)/\nconst defaultProtocolMatch = 1\nconst defaultHashMath = 2\n\n// CID, libp2p-key or DNSLink\nconst subdomainGatewayPattern = /^https?:\\/\\/([^/]+)\\.(ip[fn]s)\\.[^/?]+/\nconst subdomainIdMatch = 1\nconst subdomainProtocolMatch = 2\n\n// Fully qualified domain name (FQDN) that has an explicit .tld suffix\nconst fqdnWithTld = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\\.)+([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/\n\n/**\n * @param {*} hash\n */\nfunction isMultihash (hash) {\n  const formatted = convertToString(hash)\n  try {\n    Digest.decode(base58btc.decode('z' + formatted))\n  } catch {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {*} hash\n */\nfunction isBase32EncodedMultibase (hash) {\n  try {\n    base32.decode(hash)\n  } catch {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {*} hash\n */\nfunction isCID (hash) {\n  try {\n    if (typeof hash === 'string') {\n      return Boolean(CID.parse(hash))\n    }\n\n    if (hash instanceof Uint8Array) {\n      return Boolean(CID.decode(hash))\n    }\n\n    return Boolean(CID.asCID(hash)) // eslint-disable-line no-new\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * @param {*} input\n */\nfunction isMultiaddr (input) {\n  if (!input) return false\n  if (Multiaddr.isMultiaddr(input)) return true\n  try {\n    new Multiaddr(input) // eslint-disable-line no-new\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * @param {string | Uint8Array | Multiaddr} input\n */\nfunction isPeerMultiaddr (input) {\n  return isMultiaddr(input) && mafmt.P2P.matches(input)\n}\n\n/**\n * @param {string | Uint8Array} input\n * @param {RegExp | string} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=2]\n */\nfunction isIpfs (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false\n  }\n\n  let hash = match[hashMatch]\n\n  if (hash && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority component anyway)\n    hash = hash.toLowerCase()\n  }\n\n  return isCID(hash)\n}\n\n/**\n *\n * @param {string | Uint8Array} input\n * @param {string | RegExp} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=1]\n */\nfunction isIpns (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input)\n  if (!formatted) {\n    return false\n  }\n  const match = formatted.match(pattern)\n  if (!match) {\n    return false\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false\n  }\n\n  let ipnsId = match[hashMatch]\n\n  if (ipnsId && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure ipnsId is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    ipnsId = ipnsId.toLowerCase()\n    // Check if it is cidv1\n    if (isCID(ipnsId)) return true\n    // Check if it looks like FQDN\n    try {\n      if (!ipnsId.includes('.') && ipnsId.includes('-')) {\n        // name without tld, assuming its inlined into a single DNS label\n        // (https://github.com/ipfs/in-web-browsers/issues/169)\n        // en-wikipedia--on--ipfs-org → en.wikipedia-on-ipfs.org\n        ipnsId = ipnsId.replace(/--/g, '@').replace(/-/g, '.').replace(/@/g, '-')\n      }\n      // URL implementation in web browsers forces lowercase of the hostname\n      const { hostname } = new URL(`http://${ipnsId}`) // eslint-disable-line no-new\n      // Check if potential FQDN has an explicit TLD\n      return fqdnWithTld.test(hostname)\n    } catch (e) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @param {any} input\n */\nfunction isString (input) {\n  return typeof input === 'string'\n}\n\n/**\n * @param {Uint8Array | string} input\n */\nfunction convertToString (input) {\n  if (input instanceof Uint8Array) {\n    return uint8ArrayToString(input, 'base58btc')\n  }\n\n  if (isString(input)) {\n    return input\n  }\n\n  return false\n}\n\n/**\n * @param {string | Uint8Array} url\n */\nconst ipfsSubdomain = (url) => isIpfs(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch)\n/**\n * @param {string | Uint8Array} url\n */\nconst ipnsSubdomain = (url) => isIpns(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch)\n/**\n * @param {string | Uint8Array} url\n */\nconst subdomain = (url) => ipfsSubdomain(url) || ipnsSubdomain(url)\n\n/**\n * @param {string | Uint8Array} url\n */\nconst ipfsUrl = (url) => isIpfs(url, pathGatewayPattern) || ipfsSubdomain(url)\n/**\n * @param {string | Uint8Array} url\n */\nconst ipnsUrl = (url) => isIpns(url, pathGatewayPattern) || ipnsSubdomain(url)\n/**\n * @param {string | Uint8Array} url\n */\nconst url = (url) => ipfsUrl(url) || ipnsUrl(url) || subdomain(url)\n\n/**\n * @param {string | Uint8Array} path\n */\nconst path = (path) => isIpfs(path, pathPattern) || isIpns(path, pathPattern)\n\nmodule.exports = {\n  multihash: isMultihash,\n  multiaddr: isMultiaddr,\n  peerMultiaddr: isPeerMultiaddr,\n  cid: isCID,\n  /**\n   * @param {CID | string | Uint8Array} cid\n   */\n  base32cid: (cid) => (isBase32EncodedMultibase(cid) && isCID(cid)),\n  ipfsSubdomain,\n  ipnsSubdomain,\n  subdomain,\n  subdomainGatewayPattern,\n  ipfsUrl,\n  ipnsUrl,\n  url,\n  pathGatewayPattern: pathGatewayPattern,\n  /**\n   * @param {string | Uint8Array} path\n   */\n  ipfsPath: (path) => isIpfs(path, pathPattern),\n  /**\n   * @param {string | Uint8Array} path\n   */\n  ipnsPath: (path) => isIpns(path, pathPattern),\n  path,\n  pathPattern,\n  /**\n   * @param {string | Uint8Array} x\n   */\n  urlOrPath: (x) => url(x) || path(x),\n  /**\n   * @param {string | Uint8Array | CID} path\n   */\n  cidPath: path => isString(path) && !isCID(path) && isIpfs(`/ipfs/${path}`, pathPattern)\n}\n","'use strict';\n\n/**\n * @typedef {{ [key: string]: any }} Extensions\n * @typedef {Error} Err\n * @property {string} message\n */\n\n/**\n *\n * @param {Error} obj\n * @param {Extensions} props\n * @returns {Error & Extensions}\n */\nfunction assign(obj, props) {\n    for (const key in props) {\n        Object.defineProperty(obj, key, {\n            value: props[key],\n            enumerable: true,\n            configurable: true,\n        });\n    }\n\n    return obj;\n}\n\n/**\n *\n * @param {any} err - An Error\n * @param {string|Extensions} code - A string code or props to set on the error\n * @param {Extensions} [props] - Props to set on the error\n * @returns {Error & Extensions}\n */\nfunction createError(err, code, props) {\n    if (!err || typeof err === 'string') {\n        throw new TypeError('Please pass an Error to err-code');\n    }\n\n    if (!props) {\n        props = {};\n    }\n\n    if (typeof code === 'object') {\n        props = code;\n        code = '';\n    }\n\n    if (code) {\n        props.code = code;\n    }\n\n    try {\n        return assign(err, props);\n    } catch (_) {\n        props.message = err.message;\n        props.stack = err.stack;\n\n        const ErrClass = function () {};\n\n        ErrClass.prototype = Object.create(Object.getPrototypeOf(err));\n\n        // @ts-ignore\n        const output = assign(new ErrClass(), props);\n\n        return output;\n    }\n}\n\nmodule.exports = createError;\n","'use strict'\n\nconst convert = require('./convert')\nconst protocols = require('./protocols-table')\nconst varint = require('varint')\nconst { concat: uint8ArrayConcat } = require('uint8arrays/concat')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\n\n// export codec\nmodule.exports = {\n  stringToStringTuples,\n  stringTuplesToString,\n\n  tuplesToStringTuples,\n  stringTuplesToTuples,\n\n  bytesToTuples,\n  tuplesToBytes,\n\n  bytesToString,\n  stringToBytes,\n\n  fromString,\n  fromBytes,\n  validateBytes,\n  isValidBytes,\n  cleanPath,\n\n  ParseError,\n  protoFromTuple,\n\n  sizeForAddr\n}\n\n// string -> [[str name, str addr]... ]\n/**\n * @param {string} str\n */\nfunction stringToStringTuples (str) {\n  const tuples = []\n  const parts = str.split('/').slice(1) // skip first empty elem\n  if (parts.length === 1 && parts[0] === '') {\n    return []\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = protocols(part)\n\n    if (proto.size === 0) {\n      tuples.push([part])\n      continue\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str)\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path) {\n      tuples.push([\n        part,\n        // TODO: should we need to check each path part to see if it's a proto?\n        // This would allow for other protocols to be added after a unix path,\n        // however it would have issues if the path had a protocol name in the path\n        cleanPath(parts.slice(p).join('/'))\n      ])\n      break\n    }\n\n    tuples.push([part, parts[p]])\n  }\n\n  return tuples\n}\n\n// [[str name, str addr]... ] -> string\n/**\n * @param {[number, string?][]} tuples\n */\nfunction stringTuplesToString (tuples) {\n  /** @type {Array<string | undefined>} */\n  const parts = []\n  tuples.map((tup) => {\n    const proto = protoFromTuple(tup)\n    parts.push(proto.name)\n    if (tup.length > 1) {\n      parts.push(tup[1])\n    }\n    return null\n  })\n\n  return cleanPath(parts.join('/'))\n}\n\n// [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n/**\n * @param {Array<string[] | string >} tuples\n * @returns {[number , Uint8Array?][]}\n */\nfunction stringTuplesToTuples (tuples) {\n  return tuples.map((tup) => {\n    if (!Array.isArray(tup)) {\n      tup = [tup]\n    }\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convert.toBytes(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n *\n * @param {Array<[number, Uint8Array?]>} tuples\n * @returns {Array<[number, string?]>}\n */\n\nfunction tuplesToStringTuples (tuples) {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup)\n    if (tup[1]) {\n      return [proto.code, convert.toString(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n// [[int code, Uint8Array ]... ] -> Uint8Array\n/**\n * @param {[number, Uint8Array?][]} tuples\n */\nfunction tuplesToBytes (tuples) {\n  return fromBytes(uint8ArrayConcat(tuples.map((/** @type {any[]} */ tup) => {\n    const proto = protoFromTuple(tup)\n    let buf = Uint8Array.from(varint.encode(proto.code))\n\n    if (tup.length > 1) {\n      buf = uint8ArrayConcat([buf, tup[1]]) // add address buffer\n    }\n\n    return buf\n  })))\n}\n\n/**\n * @param {import(\"./types\").Protocol} p\n * @param {Uint8Array | number[]} addr\n */\nfunction sizeForAddr (p, addr) {\n  if (p.size > 0) {\n    return p.size / 8\n  } else if (p.size === 0) {\n    return 0\n  } else {\n    const size = varint.decode(addr)\n    return size + varint.decode.bytes\n  }\n}\n\n/**\n *\n * @param {Uint8Array} buf\n * @returns {Array<[number, Uint8Array?]>}\n */\nfunction bytesToTuples (buf) {\n  /** @type {Array<[number, Uint8Array?]>} */\n  const tuples = []\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.decode.bytes\n\n    const p = protocols(code)\n\n    const size = sizeForAddr(p, buf.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      i += n\n      continue\n    }\n\n    const addr = buf.slice(i + n, i + n + size)\n\n    i += (size + n)\n\n    if (i > buf.length) { // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n  }\n\n  return tuples\n}\n\n// Uint8Array -> String\n/**\n * @param {Uint8Array} buf\n */\nfunction bytesToString (buf) {\n  const a = bytesToTuples(buf)\n  const b = tuplesToStringTuples(a)\n  return stringTuplesToString(b)\n}\n\n// String -> Uint8Array\n/**\n * @param {string} str\n */\nfunction stringToBytes (str) {\n  str = cleanPath(str)\n  const a = stringToStringTuples(str)\n  const b = stringTuplesToTuples(a)\n\n  return tuplesToBytes(b)\n}\n\n// String -> Uint8Array\n/**\n * @param {string} str\n */\nfunction fromString (str) {\n  return stringToBytes(str)\n}\n\n// Uint8Array -> Uint8Array\n/**\n * @param {Uint8Array} buf\n */\nfunction fromBytes (buf) {\n  const err = validateBytes(buf)\n  if (err) throw err\n  return Uint8Array.from(buf) // copy\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction validateBytes (buf) {\n  try {\n    bytesToTuples(buf) // try to parse. will throw if breaks\n  } catch (err) {\n    return err\n  }\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction isValidBytes (buf) {\n  return validateBytes(buf) === undefined\n}\n\n/**\n * @param {string} str\n */\nfunction cleanPath (str) {\n  return '/' + str.trim().split('/').filter((/** @type {any} */ a) => a).join('/')\n}\n\n/**\n * @param {string} str\n */\nfunction ParseError (str) {\n  return new Error('Error parsing address: ' + str)\n}\n\n/**\n * @param {any[]} tup\n */\nfunction protoFromTuple (tup) {\n  const proto = protocols(tup[0])\n  return proto\n}\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar bases = require('./util/bases.js');\nvar asUint8array = require('./util/as-uint8array.js');\n\nfunction fromString(string, encoding = 'utf8') {\n  const base = bases[encoding];\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\n  }\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return asUint8array.asUint8Array(globalThis.Buffer.from(string, 'utf-8'));\n  }\n  return base.decoder.decode(`${ base.prefix }${ string }`);\n}\n\nexports.fromString = fromString;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar base = require('./base.js');\n\nconst base10 = base.baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n});\n\nexports.base10 = base10;\n","'use strict';\n\nvar basics = require('multiformats/basics');\nvar alloc = require('../alloc.js');\n\nfunction createCodec(name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: { decode }\n  };\n}\nconst string = createCodec('utf8', 'u', buf => {\n  const decoder = new TextDecoder('utf8');\n  return 'u' + decoder.decode(buf);\n}, str => {\n  const encoder = new TextEncoder();\n  return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', buf => {\n  let string = 'a';\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i]);\n  }\n  return string;\n}, str => {\n  str = str.substring(1);\n  const buf = alloc.allocUnsafe(str.length);\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n});\nconst BASES = {\n  utf8: string,\n  'utf-8': string,\n  hex: basics.bases.base16,\n  latin1: ascii,\n  ascii: ascii,\n  binary: ascii,\n  ...basics.bases\n};\n\nmodule.exports = BASES;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction asUint8Array(buf) {\n  if (globalThis.Buffer != null) {\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);\n  }\n  return buf;\n}\n\nexports.asUint8Array = asUint8Array;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar base = require('./base.js');\n\nconst base2 = base.rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n});\n\nexports.base2 = base2;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar cid = require('./cid.js');\nvar varint = require('./varint.js');\nvar bytes = require('./bytes.js');\nvar hasher = require('./hashes/hasher.js');\nvar digest = require('./hashes/digest.js');\n\n\n\nexports.CID = cid.CID;\nexports.varint = varint;\nexports.bytes = bytes;\nexports.hasher = hasher;\nexports.digest = digest;\n","\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar baseX$1 = require('../../vendor/base-x.js');\nvar bytes = require('../bytes.js');\n\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      switch (text[0]) {\n      case this.prefix: {\n          return this.baseDecode(text.slice(1));\n        }\n      default: {\n          throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n        }\n      }\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nconst or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nclass Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nconst from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nconst baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = baseX$1(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => bytes.coerce(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nconst rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};\n\nexports.Codec = Codec;\nexports.baseX = baseX;\nexports.from = from;\nexports.or = or;\nexports.rfc4648 = rfc4648;\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"full-width\"},[(_vm.settingIpfs)?_c('div',{staticClass:\"d-flex flex-column align-center justify-center\"},[_c('v-progress-circular',{attrs:{\"indeterminate\":\"\",\"color\":\"greenPrimary\"}}),_c('span',{staticClass:\"mew-heading-2 textDark--text\"},[_vm._v(_vm._s(_vm.$t('ens.ipfs-processing')))]),_c('span',[_vm._v(_vm._s(_vm.$t('ens.ipfs-processing-description')))])],1):_vm._e(),(!_vm.settingIpfs)?_c('div',{staticClass:\"d-flex flex-column\"},[_c('div',{staticClass:\"d-flex justify-end\"},[_c('input',{ref:\"zipInput\",staticStyle:{\"display\":\"none\"},attrs:{\"type\":\"file\",\"accept\":\".zip\"},on:{\"change\":_vm.fileChange}}),_c('mew-button',{attrs:{\"btn-style\":\"transparent\",\"title\":_vm.$t('ens.upload-my-website')},nativeOn:{\"click\":function($event){return _vm.$refs.zipInput.click()}}})],1),_c('mew-input',{attrs:{\"label\":_vm.$t('ens.content-hash'),\"placeholder\":_vm.$t('ens.enter-hash'),\"error-messages\":_vm.error},on:{\"input\":_vm.setHash},model:{value:(_vm.ipfs),callback:function ($$v) {_vm.ipfs=$$v},expression:\"ipfs\"}})],1):_vm._e(),(!_vm.settingIpfs)?_c('div',{staticClass:\"d-flex align-center justify-center mt-3\"},[_c('mew-button',{attrs:{\"disabled\":!_vm.isValidIPFS,\"title\":_vm.$t('ens.set-hash'),\"btn-size\":\"xlarge\"},nativeOn:{\"click\":function($event){return _vm.setIpfs(_vm.ipfs)}}})],1):_vm._e()])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"full-width\">\n    <div\n      v-if=\"settingIpfs\"\n      class=\"d-flex flex-column align-center justify-center\"\n    >\n      <v-progress-circular indeterminate color=\"greenPrimary\" />\n      <span class=\"mew-heading-2 textDark--text\">{{\n        $t('ens.ipfs-processing')\n      }}</span>\n      <span>{{ $t('ens.ipfs-processing-description') }}</span>\n    </div>\n    <div v-if=\"!settingIpfs\" class=\"d-flex flex-column\">\n      <div class=\"d-flex justify-end\">\n        <input\n          ref=\"zipInput\"\n          type=\"file\"\n          style=\"display: none\"\n          accept=\".zip\"\n          @change=\"fileChange\"\n        />\n        <mew-button\n          btn-style=\"transparent\"\n          :title=\"$t('ens.upload-my-website')\"\n          @click.native=\"$refs.zipInput.click()\"\n        />\n      </div>\n      <mew-input\n        v-model=\"ipfs\"\n        :label=\"$t('ens.content-hash')\"\n        :placeholder=\"$t('ens.enter-hash')\"\n        :error-messages=\"error\"\n        @input=\"setHash\"\n      />\n    </div>\n    <div v-if=\"!settingIpfs\" class=\"d-flex align-center justify-center mt-3\">\n      <mew-button\n        :disabled=\"!isValidIPFS\"\n        :title=\"$t('ens.set-hash')\"\n        btn-size=\"xlarge\"\n        @click.native=\"setIpfs(ipfs)\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nimport isIpfs from 'is-ipfs';\n\nimport { Toast, WARNING } from '@/modules/toast/handler/handlerToast';\n\nexport default {\n  props: {\n    setIpfs: {\n      default: function () {\n        return {};\n      },\n      type: Function\n    },\n    settingIpfs: {\n      default: false,\n      type: Boolean\n    },\n    uploadFile: {\n      default: function () {\n        return {};\n      },\n      type: Function\n    },\n    uploadedHash: {\n      default: '',\n      type: String\n    }\n  },\n  data() {\n    return {\n      ipfs: '' || this.uploadedHash,\n      error: ''\n    };\n  },\n  computed: {\n    isValidIPFS() {\n      if (this.ipfs !== '') return isIpfs.multihash(this.ipfs);\n      return true;\n    }\n  },\n  watch: {\n    uploadedHash(newVal) {\n      this.ipfs = newVal;\n    },\n    ipfs(newVal) {\n      if (!newVal) this.ipfs = '';\n    }\n  },\n  methods: {\n    fileChange(e) {\n      const TYPES = [\n        'application/zip',\n        'application/x-zip',\n        'application/octet-stream',\n        'application/x-zip-compressed'\n      ];\n      const supportedFile = TYPES.find(item => {\n        return (\n          e.target.files[0].type === item ||\n          e.target.files[0].name.includes('.zip')\n        );\n      });\n      if (!supportedFile) {\n        this.$refs.zipInput.value = '';\n        Toast(this.$t('ens.warning.upload-zip'), {}, WARNING);\n        return;\n      }\n      if (e.target.files[0].size < 500) {\n        this.$refs.zipInput.value = '';\n        Toast(this.$t('ens.warning.too-small'), {}, WARNING);\n        return;\n      }\n      if (e.target.files[0].size > 50000000) {\n        this.$refs.zipInput.value = '';\n        Toast(this.$t('ens.warning.too-big'), {}, WARNING);\n        return;\n      }\n      this.uploadFile(e.target.files[0]);\n    },\n    setHash(val) {\n      if (val) {\n        this.error = isIpfs.multihash(val)\n          ? ''\n          : this.$t('ens.error.empty-invalid-ipfs');\n      } else {\n        this.error = '';\n      }\n    }\n  }\n};\n</script>\n","import mod from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ManageUploadWebsite.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../../node_modules/thread-loader/dist/cjs.js!../../../../../node_modules/babel-loader/lib/index.js!../../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ManageUploadWebsite.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ManageUploadWebsite.vue?vue&type=template&id=2b67bd74&\"\nimport script from \"./ManageUploadWebsite.vue?vue&type=script&lang=js&\"\nexport * from \"./ManageUploadWebsite.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\n\nexports.coerce = coerce;\nexports.empty = empty;\nexports.equals = equals;\nexports.fromHex = fromHex;\nexports.fromString = fromString;\nexports.isBinary = isBinary;\nexports.toHex = toHex;\nexports.toString = toString;\n","'use strict';\nconst ipRegex = require('ip-regex');\n\nconst isIp = string => ipRegex({exact: true}).test(string);\nisIp.v4 = string => ipRegex.v4({exact: true}).test(string);\nisIp.v6 = string => ipRegex.v6({exact: true}).test(string);\nisIp.version = string => isIp(string) ? (isIp.v4(string) ? 4 : 6) : undefined;\n\nmodule.exports = isIp;\n","module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {\n    encode.bytes = 0\n    throw new RangeError('Could not encode varint')\n  }\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar base = require('./base.js');\n\nconst base58btc = base.baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nconst base58flickr = base.baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});\n\nexports.base58btc = base58btc;\nexports.base58flickr = base58flickr;\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar bases = require('./util/bases.js');\n\nfunction toString(array, encoding = 'utf8') {\n  const base = bases[encoding];\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\n  }\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8');\n  }\n  return base.encoder.encode(array).substring(1);\n}\n\nexports.toString = toString;\n","module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar varint = require('./varint.js');\nvar digest = require('./hashes/digest.js');\nvar base58 = require('./bases/base58.js');\nvar base32 = require('./bases/base32.js');\nvar bytes = require('./bytes.js');\n\nclass CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n    case 0: {\n        return this;\n      }\n    default: {\n        const {code, multihash} = this;\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n        }\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n        }\n        return CID.createV0(multihash);\n      }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n    case 0: {\n        const {code, digest: digest$1} = this.multihash;\n        const multihash = digest.create(code, digest$1);\n        return CID.createV1(this.code, multihash);\n      }\n    case 1: {\n        return this;\n      }\n    default: {\n        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);\n      }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && digest.equals(this.multihash, other.multihash);\n  }\n  toString(base) {\n    const {bytes, version, _baseCache} = this;\n    switch (version) {\n    case 0:\n      return toStringV0(bytes, _baseCache, base || base58.base58btc.encoder);\n    default:\n      return toStringV1(bytes, _baseCache, base || base32.base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {version, code, multihash, bytes} = value;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {version, multihash, code} = value;\n      const digest$1 = digest.decode(multihash);\n      return CID.create(version, code, digest$1);\n    } else {\n      return null;\n    }\n  }\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n    switch (version) {\n    case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);\n        } else {\n          return new CID(version, code, digest, digest.bytes);\n        }\n      }\n    case 1: {\n        const bytes = encodeCID(version, code, digest.bytes);\n        return new CID(version, code, digest, bytes);\n      }\n    default: {\n        throw new Error('Invalid version');\n      }\n    }\n  }\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n  static decode(bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes);\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n    return cid;\n  }\n  static decodeFirst(bytes$1) {\n    const specs = CID.inspectBytes(bytes$1);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = bytes.coerce(bytes$1.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest$1 = new digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest$1) : CID.createV1(specs.codec, digest$1);\n    return [\n      cid,\n      bytes$1.subarray(specs.size)\n    ];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset));\n      offset += length;\n      return i;\n    };\n    let version = next();\n    let codec = DAG_PB_CODE;\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${ version }`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\n    const cid = CID.decode(bytes);\n    cid._baseCache.set(prefix, source);\n    return cid;\n  }\n}\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n  case 'Q': {\n      const decoder = base || base58.base58btc;\n      return [\n        base58.base58btc.prefix,\n        decoder.decode(`${ base58.base58btc.prefix }${ source }`)\n      ];\n    }\n  case base58.base58btc.prefix: {\n      const decoder = base || base58.base58btc;\n      return [\n        base58.base58btc.prefix,\n        decoder.decode(source)\n      ];\n    }\n  case base32.base32.prefix: {\n      const decoder = base || base32.base32;\n      return [\n        base32.base32.prefix,\n        decoder.decode(source)\n      ];\n    }\n  default: {\n      if (base == null) {\n        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n      }\n      return [\n        source[0],\n        base.decode(source)\n      ];\n    }\n  }\n};\nconst toStringV0 = (bytes, cache, base) => {\n  const {prefix} = base;\n  if (prefix !== base58.base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);\n  }\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst toStringV1 = (bytes, cache, base) => {\n  const {prefix} = base;\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version);\n  const hashOffset = codeOffset + varint.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;\n\nexports.CID = CID;\n"],"sourceRoot":""}